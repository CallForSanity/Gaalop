
//Creates a point in N3 of three coordinates x,y,z
//args:
//x
//y
//z
createPoint = {
    _P(1)*(e0^e3^e2)+_P(2)*(e0^e1^e3)+_P(3)*(e0^e2^e1)+(e1^e2^e3)
}

//Creates an ideal point (direction) in N3 of three coordinates x,y,z
//args:
//x
//y
//z
createPointI = {
    _P(1)*(e0^e3^e2)+_P(2)*(e0^e1^e3)+_P(3)*(e0^e2^e1)
}


normalizeLineE = {
    _P(1)/
    sqrt(
        coefficient(_P(1),(e1^e2)) * coefficient(_P(1),(e1^e2))+
        coefficient(_P(1),(e3^e1)) *coefficient(_P(1),(e3^e1))+
        coefficient(_P(1),(e2^e3))* coefficient(_P(1),(e2^e3))
    )
}


normalizeLineI = {
    _P(1)/
    sqrt(
           (coefficient(_P(1),(e0^e1)) *coefficient(_P(1),(e0^e1)))+
           (coefficient(_P(1),(e0^e2)) *coefficient(_P(1),(e0^e2)))+
           (coefficient(_P(1),(e0^e3))*coefficient(_P(1),(e0^e3)))
       )
}



normalizel = {

           (coefficient(_P(1),(e0^e1)) *coefficient(_P(1),(e0^e1)))+
           (coefficient(_P(1),(e0^e2)) *coefficient(_P(1),(e0^e2)))+
           (coefficient(_P(1),(e0^e3))*coefficient(_P(1),(e0^e3)))
           
}


//The dualization operator
//args:
//m
Dual = {
    coefficient(_P(1),1)*(e0^e1^e2^e3)
    + coefficient(_P(1),e0)*(e1^e2^e3)
    + coefficient(_P(1),e1)*(e0^e3^e2)
    + coefficient(_P(1),e2)*(e0^e1^e3)
    + coefficient(_P(1),e3)*(e0^e2^e1)
    + coefficient(_P(1),e0^e1)*(e2^e3)
    + coefficient(_P(1),e0^e2)*(e3^e1)
    + coefficient(_P(1),e0^e3)*(e1^e2)
    + coefficient(_P(1),e1^e2)*(e0^e3)
    + coefficient(_P(1),e3^e1)*(e0^e2)
    + coefficient(_P(1),e2^e3)*(e0^e1)
    + coefficient(_P(1),e0^e2^e1)*(e3)
    + coefficient(_P(1),e0^e1^e3)*(e2)
    + coefficient(_P(1),e0^e3^e2)*(e1)
    + coefficient(_P(1),e1^e2^e3)*(e0)
    + coefficient(_P(1),e0^e1^e2^e3)*(1)
}

//The reverse operator
//args:
//m
reverse = {
    coefficient(_P(1),1)*(1)
    + coefficient(_P(1),e0)*(e0)
    + coefficient(_P(1),e1)*(e1)
    + coefficient(_P(1),e2)*(e2)
    + coefficient(_P(1),e3)*(e3)
    - coefficient(_P(1),e0^e1)*(e0^e1)
    - coefficient(_P(1),e0^e2)*(e0^e2)
    - coefficient(_P(1),e0^e3)*(e0^e3)
    - coefficient(_P(1),e1^e2)*(e1^e2)
    - coefficient(_P(1),e3^e1)*(e3^e1)
    - coefficient(_P(1),e2^e3)*(e2^e3)
    - coefficient(_P(1),e0^e2^e1)*(e0^e2^e1)
    - coefficient(_P(1),e0^e1^e3)*(e0^e1^e3)
    - coefficient(_P(1),e0^e3^e2)*(e0^e3^e2)
    - coefficient(_P(1),e1^e2^e3)*(e1^e2^e3)
    + coefficient(_P(1),e0^e1^e2^e3)*(e0^e1^e2^e3)
}

// Normalizes a given multivector
//args:
//mv: The multivector
Normalize = {
    _P(1)/sqrt(_P(1)*(reverse(_P(1))))
}


// Regressive Product of two given multivectors
//args:
//mv1: The first multivector
//mv2: The second multivector
regProd = {
    *(*_P(1)^*_P(2))
}

// CreatesRotor
//args:
//mv1: Angle
//mv2: x
//mv3: y
//mv4: z
createRotor = {
    norm = sqrt(_P(2)*_P(2)+_P(3)*_P(3)+_P(4)*_P(4));
    inv_norm = 1 / norm;
    half = 0.5 * _P(1);
    sin_ang = sin(half,1);
    scale   = sin_ang * inv_norm;
    cos(half)+_P(2)*scale*(e2^e3)+_P(3)*scale*(e3^e1)+_P(4)*scale*(e1^e2)
}

// CreatesTranslator
//args:
//mv1: Distance
//mv2: x
//mv3: y
//mv4: z
createTranslator = {
    norm = sqrt(_P(2)*_P(2)+_P(3)*_P(3)+_P(4)*_P(4));
    inv_norm = 1 / norm;
    half = -0.5 * _P(1);
    scale   = half * inv_norm;
    1+_P(2)*scale*(e0^e1)+_P(3)*scale*(e0^e2)+_P(4)*scale*(e0^e3)
}

